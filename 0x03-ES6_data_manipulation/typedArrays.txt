- Typed arrays should not be confused with normal arrays, calling Array.isArray() on typed arrays returns false.
- To achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into buffers and views.
- A buffer (implemented by the ArrayBuffer object) is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents.
- In order to access the memory contained in a buffer, you need to use a view. 
- A view provides a context — that is, a data type, starting offset, and number of elements — that turns the data into an actual typed array.
First of all, we will need to create a buffer, here with a fixed length of 16-bytes:

const buffer = new ArrayBuffer(16);
Copy to Clipboard
At this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. We can confirm that it is indeed 16 bytes long, and that's about it:

if (buffer.byteLength === 16) {
  console.log("Yes, it's 16 bytes.");
} else {
  console.log("Oh no, it's the wrong size!");
}
Copy to Clipboard
Before we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers:

const int32View = new Int32Array(buffer);
Copy to Clipboard
Now we can access the fields in the array just like a normal array:

for (let i = 0; i < int32View.length; i++) {
  int32View[i] = i * 2;
}
Copy to Clipboard
This fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values 0, 2, 4, and 6.

